n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.


n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.


n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.


n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.


n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.


n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

n this article, we’ll discuss everything about the event-emitter class. The following are the topics that I’ll be covering in this article.
What is an event emitter?
Creating an event emitter
Attaching event listeners and publishing events to an event emitter
Maintaining a single event-emitter instance applicationwide
Is it synchronous or asynchronous?
Order of execution of event emitters
How and where NodeJS internally uses event emitters
Some useful member functions of the event-emitter class
Visit https://knowledgescoops.com for more such articles
Event Emitters
EventEmitter is a class that helps us create a publisher-subscriber pattern in NodeJS.
With an event emitter, we can simply raise a new event from a different part of an application, and a listener will listen to the raised event and have some action performed for the event.
Creating an Event Emitter
To create an event emitter, we need to create an instance of the event emitter instance from the events module in NodeJS.
Note: I’m using Typescript instead of JavaScript.
import { EventEmitter } from 'events';
const eventEmitter = new EventEmitter();
This will create an EventEmitter instance. But what do we do with it? Let's see it in action.
Publishing Events and Listening to Them
The EventEmitter class comes with a lot of member functions. We’ll be using these member functions to publish events and listen to them.
For now, we’ll only pay attention to these two member functions:
on(eventName, …)
emit(eventName, …)
To publish an event, we use the emit() function, and to listen to an event, we use the on() function.
In EventEmitters, we publish and listen to the events by name.
In the last code snippet, where we created an EventEmitter object, we use the following code to raise events and listen to them.
Running the above code snippet prints the following output in the console:
In the above code snippet, we raised an event with the name myEvent on the last line, and we had a listener registered to the event just above the line of the publishing event.
At the time of publishing the event, there must be an EventEmitter listener existing to listen to the published event.

